# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10

  #region option
  region: ${opt:region, self:custom.defaultRegion}
  # apiGateway:
  #   restApiId: axllcz6s0d
  #   restApiRootResourceId: jlgozwzme4
  #   restApiResources:
  #     /hello: nvou1b
# custom:
#   # You must have the documentation object
#   documentation:
#     # this is general info about the API
#     api:
#       info:
#         version: "2"
#         title: Example API
#         description: Some example API
#         termsOfService: https://www.google.com
#         contact:
#           name: The contact person
#           url: https://www.serverless.com/framework
#           email: some-fake@email.com
#         license:
#           name: The license
#           url: https://www.github.com
#       tags:
#         - name: Tag1
#           description: The first tag
#         - name: Tag2
#           description: That other tag that we all love
#     # Now we describe all the models that we use
#     models:
#       - name: body
#         contentType: "application/json"
#         schema:
#           type: object
#           properties:
#             message:
#               type: string

functions:
  calculator-lambda:
    handler: handler.hello
    #    Apigateway endpoint
    # events:
    #   - http:
    #       path: hello/test50
    #       method: post
    #       cors: true
    #       integration: lambda
    # documentation:
    #   summary: Gets a simple message
    #   tags:
    #     - Tag1
    #   description: >
    #     Demonstrates a GET method. You can see query string parameters,
    #     request headers, response body and response headers.
    #   queryParams:
    #     - name: firstParam
    #       description: The first param that we want, you MUST pass it
    #       required: true
    #     - name: secondParam
    #       description: The second param. This one is optional
    #   methodResponses:
    #     - statusCode: "200"
    #       responseModels:
    #         "application/json": body
    # response:
    # headers:
    #   Content-Type: "'text/html'"
    # template: $input.path('$body')
    # statusCodes:
    #   201:
    #     pattern: "" # Default response method
    #   409:
    #     pattern: '.*"statusCode":409,.*' # JSON response
    #     template:
    #       application/json: $input.path("$.errorMessage") # JSON return object
    #       application/xml: $input.path("$.body.errorMessage") # XML return object
    #     headers:
    #       Content-Type: "'application/json+hal'"
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
